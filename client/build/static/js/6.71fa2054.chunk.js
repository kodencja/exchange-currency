(this.webpackJsonpclient=this.webpackJsonpclient||[]).push([[6],{66:function(e,n){e.exports='\n\n/* server.js - file responsible for setting backend port,\n catching requests coming from frontend and re-direct them to controller.js throught routes */\n\n const express = require("express");\n const path = require("path");\n const cors = require("cors");\n \n const routes = require("./routes/routes");\n \n // Create a new express application named \'app\'\n const app = express();\n \n // Set our backend port to be either an environment variable or port 5000\n const port = process.env.PORT || 5000;\n\n// This application level middleware prints incoming requests to the servers console, useful to see incoming requests\napp.use((req, res, next) => {\n  console.log("Request_Endpoint: "+ req.method +" " +req.url");\n  next();\n});\n\n// direct request through routes\napp.use("/api", routes);\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\napp.use(cors());\n\n// This middleware informs the express application to serve our compiled React files\nif (\n  process.env.NODE_ENV === "production" ||\n  process.env.NODE_ENV === "staging"\n) {\n  app.use(express.static(path.join(__dirname, "./client/build")));\n\n  // All other GET requests not handled before will return our React app\n  app.get("*", (req, res) => {\n    res.sendFile(path.resolve(__dirname, "./client/build", "index.html"));\n  });\n  console.log("Use other paths!");\n}\n\n// Catch any bad requests\napp.get("*", (req, res) => {\n  res.status(200).json({\n    msg: "Catch All",\n  });\n});\n\napp.use((req, res) => {\n  res.status(404).json({ msg: "404" });\n});\n\napp.listen(port, () => {\n  console.log("Server is running at port: " + port);\n});\n\n\n// routes.js  - create router\n\nconst express = require("express");\nconst controller = require("../controllers/controller");\n\n// create a new instance of Router object - router is like a "mini-app" but doesn\'t do anything, we have to use router inside the app\nconst router = express.Router();\n\nrouter.get("/countries", controller.countries);\nrouter.get("/exchange", controller.exchange);\n\nmodule.exports = router;\n\n\n\n// controller.js - \n/* handling security issues\nincluding validation of incoming api data, sending http requests with queries and handling the received data on the back side and send them back to frontend side */\n\n\nconst axios = require("axios");\nconst validator = require("validator");\n\nconst feedbackInit = {\n  amountCheck: {},\n  currFromCheck: {},\n  currToCheck: {},\n  fitCountries: [],\n  exchRate: "",\n  date: "",\n  inputCorrect: false,\n  success: false,\n  error: "",\n};\n\nlet feedback = { ...feedbackInit };\n\nconst handleValidation = (val, propName, methodName, min, max) => {\n  console.log("during validation");\n  return new Promise((resolve, reject) => {\n    feedback[propName].incorrect = "";\n    feedback[propName].ok = "";\n    const valNoSpaces = val.split(" ").join("");\n\n    if (valNoSpaces.length <= 0) {\n      feedback[propName].incorrect = "Please fill in all fields in the form.";\n      feedback[propName].ok = false;\n      resolve(false);\n    } else {\n      if (methodName !== null && !validator[methodName](valNoSpaces)) {\n        switch (propName) {\n          case "currFromCheck":\n            feedback[propName].incorrect =\n              "Please use only English letters for currency symbol.";\n            break;\n          case "currToCheck":\n            feedback[propName].incorrect =\n              "Please use only English letters for currency symbol.";\n            break;\n          case "amountCheck":\n            feedback[propName].incorrect =\n              "Please use only numbers for amount.";\n            break;\n        }\n        feedback[propName].ok = false;\n        resolve();\n      } else if (!validator.isLength(valNoSpaces, { min: min })) {\n        feedback[\n          propName\n        ].incorrect = \'The currency symbol cannot be shorter than\' +min+ \'characters.\';\n        feedback[propName].ok = false;\n        resolve();\n      } else if (!validator.isLength(valNoSpaces, { max: max })) {\n        feedback[propName].incorrect = "The currency symbol is too long.";\n        feedback[propName].ok = false;\n        resolve();\n      } else {\n        feedback[propName].ok = true;\n        resolve();\n      }\n    }\n  });\n};\n\nconst checkIfValidationSuccess = (feedbackObj) => {\n  return new Promise((resolve, reject) => {\n    let successCheckArr = [];\n    for (singleProp in feedbackObj) {\n      if (feedbackObj[singleProp].hasOwnProperty("ok")) {\n        successCheckArr.push(feedbackObj[singleProp].ok);\n      }\n    }\n    resolve(successCheckArr);\n  });\n};\n\nconst countries = async (req, res, next) => {\n\n  await handleValidation(req.query.toCurrency, "currToCheck", "isAlpha", 3, 3);\n\n  if (feedback.currToCheck.ok === true) {\n    feedback.inputCorrect = true;\n    axios\n      .get(req.query.urlAddress)\n      .then((response, err) => {\n        if (err) {\n          feedback.success = false;\n          throw new Error(err);\n        } else {\n          feedback.success = true;\n\n          const fitCountries = response.data.map(\n            (country) => " " + country.name\n          );\n          feedback.fitCountries = fitCountries;\n          res.json(feedback);\n          feedback = { ...feedbackInit };\n          return;\n        }\n      })\n      .catch((err) => {\n        if (err.hostname) {\n          feedback.error = \'Not able to connect with\' +err.hostname;\n        } else {\n          feedback.error = \'Unable to connect with\' + err;\n        }\n        feedback.success = false;\n        res.json(feedback);\n        return;\n      });\n  } else {\n    feedback.success = false;\n    feedback.inputCorrect = false;\n    res.json(feedback);\n    feedback = { ...feedbackInit };\n    throw new Error("Some input has incorrect value!");\n  }\n};\n\nconst exchange = async (req, res) => {\n  const toCurr = req.query.toCurrency;\n  const fromCurr = req.query.fromCurrency;\n  const figure = req.query.amount;\n\n  await handleValidation(fromCurr, "currFromCheck", "isAlpha", 3, 3);\n  await handleValidation(figure, "amountCheck", "isNumeric", 1, 7);\n\n  // check if validation of all values was success\n  const successArray = await checkIfValidationSuccess(feedback);\n\n  // if there are no errors in input fields\n  if (successArray.every((el) => el === true)) {\n    feedback.inputCorrect = true;\n    axios\n      .get(req.query.urlAddress)\n      .then((response, err) => {\n        if (err) {\n          feedback.success = false;\n          throw new Error(err);\n        } else {\n          feedback.success = true;\n          const rate = response.data.rates;\n          let rateFrom, rateTo;\n          if (fromCurr === "EUR") {\n            rateFrom = 1;\n          } else {\n            rateFrom = rate[fromCurr];\n          }\n          if (toCurr === "EUR") {\n            rateTo = 1;\n          } else {\n            rateTo = rate[toCurr];\n          }\n          const euro = 1 / rateFrom;\n          const exchangeRate = euro * rateTo;\n          feedback.exchRate = exchangeRate;\n          feedback.date = response.data.date;\n          res.json(feedback);\n          feedback = { ...feedbackInit };\n          return;\n        }\n      })\n      .catch((err) => {\n        feedback.success = false;\n        if (err.hostname) {\n          feedback.error = \'Unable to connect with \'+err.hostname;\n        } else {\n          feedback.error = \'Something went wrong!\' +err;\n        }\n        res.json(feedback);\n        feedback = { ...feedbackInit };\n        return;\n      });\n  } else {\n    feedback.success = false;\n    feedback.inputCorrect = false;\n    res.json(feedback);\n    feedback = { ...feedbackInit };\n    throw new Error("Some input has incorrect value!");\n    // return;\n  }\n};\n\nmodule.exports = { countries, exchange };\n\n'},72:function(e,n,r){"use strict";r.r(n);var s=r(1),o=r.n(s),t=r(66),a=r.n(t),c=r(0);function i(){return console.log("BackCode render!"),Object(c.jsx)("pre",{className:"pre-code",children:Object(c.jsx)("code",{children:a.a})})}n.default=o.a.memo(i)}}]);
//# sourceMappingURL=6.71fa2054.chunk.js.map