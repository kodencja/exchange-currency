{"version":3,"sources":["components/ModalContent.js","components/ModalComp.js"],"names":["BackCode","lazy","ModalContent","modalContextValue","useContext","ModalContext","useState","ifBackendCodeShow","setIfBackendCodeShow","setModalIsOpen","backendDivStyle","useMemo","className","onClick","fallback","React","memo","ModalComp","modalIsOpen","isOpen","onRequestClose","shouldCloseOnOverlayClick","overlay","Modal","setAppElement"],"mappings":"mKAEA,iCAEA,IAAMA,EAAWC,gBAAK,kBAAM,gCAE5B,SAASC,IACP,IAAMC,EAAoBC,qBAAWC,KACrC,EAAkDC,oBAAS,GAA3D,mBAAOC,EAAP,KAA0BC,EAA1B,KAEQC,EAAmBN,EAAnBM,eAEFC,EAAkBC,mBAAQ,WAK9B,OAHAJ,EACoB,uBACA,wBAEnB,CAACA,IAEJ,OACE,qCACE,qBAAKK,UAAU,aAAf,SACE,wBACEA,UAAU,mCACVC,QAAS,kBAAMJ,GAAe,IAFhC,iBAQF,mBAAGG,UAAU,gBAAb,uCACA,sBAAKA,UAAU,0BAAf,UACE,gCACE,2HAE8B,wCAF9B,sCAIE,4DAJF,4BAI8D,IAC5D,6CALF,QAK0B,6CAL1B,sEAMkD,OAC7C,IACL,+FACuE,IACrE,yCAFF,uCAEsD,IACpD,2CAHF,WAG4B,IAC1B,2EAJF,OAIwD,IACtD,2CALF,4BAK4C,8CAL5C,0IAOsE,IACpE,oDARF,QAQiC,yCARjC,kDAS+B,sDAT/B,8CAUqC,6CAVrC,iKAgBF,wBAAOA,UAAU,aAAjB,UACG,IACD,wBACEA,UAAU,mCACVC,QAAS,kBAAML,GAAsBD,IAFvC,SAIGA,EAAoB,gBAAkB,qBAEzC,sBAAKK,UAAWF,EAAhB,UACE,qBAAKE,UAAU,kBAAf,0BACA,cAAC,WAAD,CAAUE,SAAU,2CAApB,SACE,cAACd,EAAD,kBASCe,UAAMC,KAAKd,GCtE1B,SAASe,IACP,IAAMd,EAAoBC,qBAAWC,KAE7Ba,EAAgCf,EAAhCe,YAAaT,EAAmBN,EAAnBM,eAErB,OACE,cAAC,IAAD,CACEG,UAAU,aACVO,OAAQD,EACRE,eAAgB,kBAAMX,GAAe,IACrCY,2BAA2B,EAC3BC,SAAS,EALX,SAOE,cAAC,EAAD,MAjBN,iCAEAC,IAAMC,cAAc,SAoBLT,cAAMC,KAAKC","file":"static/js/10.0051a02d.chunk.js","sourcesContent":["import React, { useContext, useState, useMemo, lazy, Suspense } from \"react\";\r\nimport { ModalContext } from \"../App\";\r\nimport(\"./css/modalContent.css\");\r\n\r\nconst BackCode = lazy(() => import(\"./BackCode\"));\r\n\r\nfunction ModalContent() {\r\n  const modalContextValue = useContext(ModalContext);\r\n  const [ifBackendCodeShow, setIfBackendCodeShow] = useState(false);\r\n\r\n  const { setModalIsOpen } = modalContextValue;\r\n\r\n  const backendDivStyle = useMemo(() => {\r\n    let styleClasses;\r\n    ifBackendCodeShow\r\n      ? (styleClasses = \"backend-info d-block\")\r\n      : (styleClasses = \"backend-info d-none\");\r\n    return styleClasses;\r\n  }, [ifBackendCodeShow]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"btn-close2\">\r\n        <button\r\n          className=\"btn close-btn border-dark btn-sm\"\r\n          onClick={() => setModalIsOpen(false)}\r\n        >\r\n          X\r\n        </button>\r\n      </div>\r\n\r\n      <p className=\"title-code h5\">Webdeveloping information</p>\r\n      <div className=\"dialog-question dev-box\">\r\n        <div>\r\n          <p>\r\n            &nbsp;&nbsp;&nbsp;This page has its backend and frontend sides. The\r\n            backend side was created in <b>NODE.JS</b> with support of libraries\r\n            such as:\r\n            <b> EXPRESS, PATH, CORS, AXIOS</b> (to make http requests),{\" \"}\r\n            <b>CONCURRENTLY</b> and <b>VALIDATOR.JS</b> (to validate input\r\n            values coming from requests from the frontend).{\" \"}\r\n          </p>{\" \"}\r\n          <p>\r\n            &nbsp;&nbsp;&nbsp;The frontend side, on the other hand, was built in{\" \"}\r\n            <b>REACT.JS</b> with functional components based on{\" \"}\r\n            <b>HOOK tools</b> such as{\" \"}\r\n            <b>useState, useReducer, useMemo, useCallback</b> and{\" \"}\r\n            <b>useContext</b> as well as custom hook '<b>useCurrencyEx</b>'\r\n            (advanced hook to deal with input values, sending data to backend\r\n            and handling response coming to it). Other React libraries embrace:{\" \"}\r\n            <b>createContext, lazy</b> and <b>suspense</b>. Some additional\r\n            libraries used here include: <b>axios and react-modal</b>. Apart\r\n            from using mouse and 'tab' key the <b>inputs focus</b> can be\r\n            changed also with the ENTER key. Input values are validate both on\r\n            frontend and backend sides. The components have been optimized\r\n            appropriately.\r\n          </p>\r\n        </div>\r\n        <aside className=\"aside-code\">\r\n          {\" \"}\r\n          <button\r\n            className=\"btn btn-sm close-btn border-dark\"\r\n            onClick={() => setIfBackendCodeShow(!ifBackendCodeShow)}\r\n          >\r\n            {ifBackendCodeShow ? \"Hide the code\" : \"Show me the code\"}\r\n          </button>\r\n          <div className={backendDivStyle}>\r\n            <div className=\"code-content h4\">BackEnd code</div>\r\n            <Suspense fallback={<p>Loading...</p>}>\r\n              <BackCode />\r\n            </Suspense>\r\n          </div>\r\n        </aside>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default React.memo(ModalContent);\r\n","import React, { useContext } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport { ModalContext } from \"../App\";\r\nimport ModalContent from \"./ModalContent\";\r\nimport(\"./css/modalComp.css\");\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction ModalComp() {\r\n  const modalContextValue = useContext(ModalContext);\r\n\r\n  const { modalIsOpen, setModalIsOpen } = modalContextValue;\r\n\r\n  return (\r\n    <Modal\r\n      className=\"dialog-box\"\r\n      isOpen={modalIsOpen}\r\n      onRequestClose={() => setModalIsOpen(false)}\r\n      shouldCloseOnOverlayClick={true}\r\n      overlay={true}\r\n    >\r\n      <ModalContent />\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default React.memo(ModalComp);\r\n"],"sourceRoot":""}